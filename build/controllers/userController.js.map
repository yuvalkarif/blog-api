{"version":3,"sources":["../../src/controllers/userController.js"],"names":["saltRounds","signup","req","res","next","username","displayname","password","body","hashedPassword","bcrypt","hash","newUser","User","savedUser","save","error","json","msg","user","login","existingUser","findOne","isAuth","compare","token","jwt","sign","process","env","JWT_KEY","err","status"],"mappings":";;;;;;;AAAA;;AAEA;;AAGA;;AACA;;;;;;;;AAHA,IAAMA,UAAU,GAAG,EAAnB,C,CACA;;AAIO,IAAMC,MAAM;AAAA,+BAAG,WAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC9C,QAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,WAAZ;AAAyBC,MAAAA;AAAzB,QAAsCL,GAAG,CAACM,IAAhD;AACA,QAAMC,cAAc,SAASC,gBAAOC,IAAP,CAAYJ,QAAZ,EAAsBP,UAAtB,CAA7B;AACA,QAAMY,OAAO,GAAG,IAAIC,aAAJ,CAAS;AACvBR,MAAAA,QADuB;AAEvBC,MAAAA,WAFuB;AAGvBC,MAAAA,QAAQ,EAAEE;AAHa,KAAT,CAAhB;AAKA,QAAIK,SAAJ;;AACA,QAAI;AACFA,MAAAA,SAAS,SAASF,OAAO,CAACG,IAAR,EAAlB;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACdZ,MAAAA,IAAI,CAACY,KAAD,CAAJ;AACD;;AACDb,IAAAA,GAAG,CAACc,IAAJ,CAAS;AACPC,MAAAA,GAAG,EAAE,2BADE;AAEPC,MAAAA,IAAI,EAAEL;AAFC,KAAT;AAID,GAlBkB;;AAAA,kBAANb,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AAoBA,IAAMmB,KAAK;AAAA,gCAAG,WAAOlB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC7C,QAAM;AAAEC,MAAAA,QAAF;AAAYE,MAAAA;AAAZ,QAAyBL,GAAG,CAACM,IAAnC;AAEA,QAAIa,YAAJ;;AACA,QAAI;AACFA,MAAAA,YAAY,SAASR,cAAKS,OAAL,CAAa;AAAEjB,QAAAA,QAAQ,EAAEA;AAAZ,OAAb,CAArB;AACD,KAFD,CAEE,OAAOW,KAAP,EAAc;AACdZ,MAAAA,IAAI,CAACY,KAAD,CAAJ;AACD;;AAED,QAAIK,YAAJ,EAAkB;AAChB,UAAIE,MAAJ;;AACA,UAAI;AACFA,QAAAA,MAAM,SAASb,gBAAOc,OAAP,CAAejB,QAAf,EAAyBc,YAAY,CAACd,QAAtC,CAAf;AACD,OAFD,CAEE,OAAOS,KAAP,EAAc;AACdZ,QAAAA,IAAI,CAACY,KAAD,CAAJ;AACD;;AACD,UAAIO,MAAJ,EAAY;AACV,YAAIE,KAAJ;;AACA,YAAI;AACFA,UAAAA,KAAK,SAASC,sBAAIC,IAAJ,CAAS;AAAEN,YAAAA;AAAF,WAAT,EAA2BO,OAAO,CAACC,GAAR,CAAYC,OAAvC,CAAd;AACD,SAFD,CAEE,OAAOC,GAAP,EAAY;AACZ3B,UAAAA,IAAI,CAAC2B,GAAD,CAAJ;AACD;;AACD,YAAI,CACH,CADD,CACE,OAAOf,KAAP,EAAc,CAAE;;AAClBb,QAAAA,GAAG,CAACc,IAAJ,CAAS;AACPC,UAAAA,GAAG,EAAE,gCADE;AAEPK,UAAAA,MAFO;AAGPE,UAAAA,KAHO;AAIPN,UAAAA,IAAI,EAAEE;AAJC,SAAT;AAMD,OAfD,MAeO;AACLlB,QAAAA,GAAG,CAACc,IAAJ,CAAS;AACPC,UAAAA,GAAG,EAAE,2BADE;AAEPK,UAAAA;AAFO,SAAT;AAID;AACF,KA5BD,MA4BO;AACLpB,MAAAA,GAAG,CAAC6B,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAArB;AACD;AACF,GAzCiB;;AAAA,kBAALE,KAAK;AAAA;AAAA;AAAA,GAAX","sourcesContent":["import User from \"../models/user\";\n//Bcrypt\nimport bcrypt from \"bcrypt\";\nconst saltRounds = 10;\n//JWT\nimport jwt from \"jsonwebtoken\";\nimport \"dotenv\";\n\nexport const signup = async (req, res, next) => {\n  const { username, displayname, password } = req.body;\n  const hashedPassword = await bcrypt.hash(password, saltRounds);\n  const newUser = new User({\n    username,\n    displayname,\n    password: hashedPassword,\n  });\n  let savedUser;\n  try {\n    savedUser = await newUser.save();\n  } catch (error) {\n    next(error);\n  }\n  res.json({\n    msg: \"User Created Successfully\",\n    user: savedUser,\n  });\n};\n\nexport const login = async (req, res, next) => {\n  const { username, password } = req.body;\n\n  let existingUser;\n  try {\n    existingUser = await User.findOne({ username: username });\n  } catch (error) {\n    next(error);\n  }\n\n  if (existingUser) {\n    let isAuth;\n    try {\n      isAuth = await bcrypt.compare(password, existingUser.password);\n    } catch (error) {\n      next(error);\n    }\n    if (isAuth) {\n      let token;\n      try {\n        token = await jwt.sign({ existingUser }, process.env.JWT_KEY);\n      } catch (err) {\n        next(err);\n      }\n      try {\n      } catch (error) {}\n      res.json({\n        msg: \"User Authenticated Successfuly\",\n        isAuth,\n        token,\n        user: existingUser,\n      });\n    } else {\n      res.json({\n        msg: \"User Authenticated Failed\",\n        isAuth,\n      });\n    }\n  } else {\n    res.status(401).json({ msg: \"Wrong Credentials\" });\n  }\n};\n"],"file":"userController.js"}