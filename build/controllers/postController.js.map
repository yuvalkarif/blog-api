{"version":3,"sources":["../../src/controllers/postController.js"],"names":["body","validationResult","require","postsRead","req","res","next","posts","Post","find","sort","date","error","json","postCreate","trim","isLength","min","escape","errors","isEmpty","title","author","thumbnail","newPost","savedPost","save","msg","post","array","postRemove","id","params","deletedPost","findByIdAndDelete","postRead","fetchedPost","findById","postUpdate","editedPost","findByIdAndUpdate","edited","DateTime","now","toLocaleString","DATE_MED","new","postCommentCreate","postId","username","$push","comments","postCommentRemove","postID","commentID","removedComments","filter","comment","length"],"mappings":"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","sourcesContent":["import Post from \"../models/post\";\nimport { DateTime } from \"luxon\";\nimport { thisExpression } from \"@babel/types\";\nconst { body, validationResult } = require(\"express-validator\");\n\nexport const postsRead = async (req, res, next) => {\n  let posts;\n  try {\n    posts = await Post.find().sort({ date: \"descending\" });\n  } catch (error) {\n    next(error);\n  }\n  res.json({\n    posts,\n  });\n};\n\nexport const postCreate = [\n  body(\"title\", \"Fill in the title.\").trim().isLength({ min: 1 }).escape(),\n  body(\"body\", \"Fill in the body.\").trim().isLength({ min: 1 }).escape(),\n  async (req, res, next) => {\n    const errors = validationResult(req);\n    if (errors.isEmpty()) {\n      const { title, body, author, thumbnail } = req.body;\n      let newPost = new Post({\n        title,\n        body,\n        author,\n        thumbnail,\n      });\n      let savedPost;\n      try {\n        savedPost = await newPost.save();\n      } catch (error) {\n        next(error);\n      }\n      res.json({\n        msg: \"Post Created Succesfully\",\n        post: savedPost,\n      });\n    } else {\n      res.json({\n        msg: \"Post Creation Failed\",\n        errors: errors.array(),\n      });\n    }\n  },\n];\nexport const postRemove = async (req, res, next) => {\n  const { id } = req.params;\n  let deletedPost;\n  try {\n    deletedPost = await Post.findByIdAndDelete(id);\n    res.json({\n      msg: \"Post Removed Successfuly\",\n      post: deletedPost,\n    });\n  } catch (error) {\n    next(error);\n    res.json({\n      msg: \"Post Remove Failed\",\n      error,\n    });\n  }\n};\n\nexport const postRead = async (req, res, next) => {\n  const { id } = req.params;\n  let fetchedPost;\n  try {\n    fetchedPost = await Post.findById(id);\n  } catch (error) {\n    next(error);\n  }\n  res.json({\n    msg: \"Post fetched Successfuly\",\n    post: fetchedPost,\n  });\n};\n\nexport const postUpdate = [\n  body(\"title\", \"Fill in the title.\").trim().isLength({ min: 1 }).escape(),\n  body(\"body\", \"Fill in the body.\").trim().isLength({ min: 1 }).escape(),\n  async (req, res, next) => {\n    const errors = validationResult(req);\n    if (errors.isEmpty()) {\n      const { id } = req.params;\n      const { title, body, thumbnail } = req.body;\n      let editedPost;\n      try {\n        editedPost = await Post.findByIdAndUpdate(\n          id,\n          {\n            title: title,\n            body: body,\n            edited: DateTime.now().toLocaleString(DateTime.DATE_MED),\n            thumbnail,\n          },\n          {\n            new: true,\n          }\n        );\n      } catch (error) {\n        next(error);\n      }\n      res.json({\n        msg: \"Post Updated Succesfully\",\n        post: editedPost,\n      });\n    } else {\n      res.json({\n        msg: \"Post Update Failed\",\n        errors,\n      });\n    }\n  },\n];\n\nexport const postCommentCreate = [\n  body(\"username\", \"Fill in the username.\")\n    .trim()\n    .isLength({ min: 1 })\n    .escape(),\n  body(\"body\", \"Fill in the body.\").trim().isLength({ min: 1 }).escape(),\n  async (req, res, next) => {\n    let errors = validationResult(req);\n    if (errors.isEmpty()) {\n      const { id: postId } = req.params;\n      const { body, username } = req.body;\n      let editedPost;\n      try {\n        editedPost = await Post.findByIdAndUpdate(\n          postId,\n          {\n            $push: { comments: { body: body, username: username } },\n          },\n          { new: true }\n        );\n      } catch (error) {\n        next(error);\n      }\n      res.json({\n        msg: \"Comment Added Succesfully\",\n        editedPost,\n      });\n    } else {\n      res.json({\n        errors,\n      });\n    }\n  },\n];\n\nexport const postCommentRemove = async (req, res, next) => {\n  const { postID, commentID } = req.params;\n  let fetchedPost;\n  try {\n    fetchedPost = await Post.findById(postID);\n    let removedComments = fetchedPost.comments.filter(\n      (comment) => comment.id != commentID\n    );\n\n    if (removedComments.length == fetchedPost.comments.length) {\n      throw { msg: \"Comment to remove not Found\", commentID, postID };\n    }\n\n    fetchedPost.comments = removedComments;\n    fetchedPost.save();\n    res.json({\n      msg: \"Post Comment Removed Successfuly\",\n      post: fetchedPost,\n    });\n  } catch (error) {\n    next(error);\n    res.json({\n      msg: \"Post Comment Removal Failed\",\n      error,\n    });\n  }\n};\n// CRUD - Create Read Update Delete\n"],"file":"postController.js"}